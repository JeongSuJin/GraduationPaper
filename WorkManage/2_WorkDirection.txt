#1 현재 e4defrag에서 쓰이는 defragmentation 기법에서는 fragmentation문제상황을 어떻게 분류해놓고 대처하는지 코드보고 알아내기
	- (1)Single file fragmentation, (2)Relevant file fragmentation, (3)Free space fragmentation의 경우로 분류되어 구현되어 있는지 확인.

#2 파악한 defragmentation기법의 알고리즘 도식화 -> 알고리즘에 우리논문 아이디어 적용시켜서 수정
	-> 실제로 defragmentation은 어느정도의 파일크기에서 많이 일어나는지 조사. 관련된 통계를 갖고 있는 논문을 찾는게 제일 좋음. 

#3 대충 생각해본 논리전개
	"크기 x이상의 fragment가 다른 fragment와의 합병을 위해 새 공간을 할당받는 것은 비효율적이다" 를 주장할 것인데, 아래의 몇가지를 그 이유로 들 것이다.	
	-> (1) 안드로이드 ext4에서 많이 occur하는 [a~z (kB)크기의 fragment들이 모여 defragment되는 상황]을 조사해보았다.
	-> (2) 평균적으로 a(kB  or  파일전체크기 대비 비율)의 fragment 들이 모여서 defragment 되었을때 가장 큰 (파일로드)성능향상을 보인다.
	-> (3) z(kB) 크기 이상의 fragment는 (2)의 defragment에 굳이 참여하지 않아도 된다.
              이미 자잘한 a사이즈의 fragment들이 다 모여서 성능향상을 이루었고, z크기 이상의 파일도 참여하는 것은 성능향상에 큰 기여를 하지 못한다.
	-> (4) 플래시 메모리의 수명을 단축 + 파일로드 성능향상에 큰 기여를 못하는 defragmentation 이라는 점에서 z(kB 혹은 전체파일크기 대비 비율)크기 이상의 fragment는 defragment에 참여하지 않도록 하는 기법을 제안한다.

        #3에 대한 윤지언니 피드백:
	- 전개 괜찮음.
	- 폰에서 frag사이즈 별 read 성능을 보면 될듯. 
	- read 성능이 수렴되는 곳을 기점으로 해서, 이 이상은 defrag를 하지 않겠다고 제안하면 됨

#4 피드백에 대한 나의 생각:
	- 일단 read 성능이 수렴되는 frag사이즈(=이하 기점 T)가 사용자 별로 다를 수 있다(왠지)
	- 구현방향이 두가지로 나뉨
		(방향1)
		    (a)안드로이드 표본집단의 (평균 or 최빈값)기점T를 알아낼수 있는 통계자료(혹은 논문)을 찾아낸다
		    (b)안드로이드 사용자들의 common T를 기준으로 defrag 구현.
		       -> 방향2에 비해 구현은 쉬운데 관련통계논문이 있을거 같지가 않음.
		(방향2)
		    (a)ext4에 기점T를 파악해내는 기능, 알아낸 기점T 를 기반으로 앞으로는 
	            (b)기점 T이상의 fragment는 defragment에 참여시키지 않는 기능 을 추가해야 한다. 
                       -> 사용자 별 자동 커스터마이즈..  기점T를 알아내기 위해 이미 있는 라이브러리 사용.
 

#5 궁금증이 생겼음. 안드로이드에서 defrag는 언제 수행됨? 자동수행인건 확실한데 그 타이밍이 언제지? 